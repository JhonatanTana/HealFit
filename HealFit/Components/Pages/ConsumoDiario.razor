@page "/ConsumoDiario"
@using HealFit.Components.Layout
@using HealFit.Model
@using HealFit.Service
@inject IConsumoService ConsumoService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<NavMenu></NavMenu>

<section class="content px-4">

    <section class="w-100 d-flex flex-row justify-content-between align-items-center">

        <h3>Consumo Diario</h3>
        <button class="btn btn-primary" @onclick="Adicionar">Adicionar</button>

    </section>
    

    <main class="mt-4">

        @foreach(var produto in produtosConsumidos) {

            <div class="m-2 p-2 border border-1 border-secondary d-flex flex-row justify-content-between align-items-center">
                <div>
                    <p>Produto:@produto.Produto</p>
                    <p>Quantidade:@produto.Quantidade @produto.MetricServingUnit</p>
                    <p>Calorias:@produto.Calories kcal</p>
                </div>
                <div class="d-flex flex-row h-50">
                    <button class="btn btn-outline-info me-2" @onclick="() => Editar(produto.ConsumoId)">Editar</button>
                    <button class="btn btn-outline-danger" @onclick="() => Excluir(produto.ConsumoId)">Excluir</button>
                </div>
            </div>

        }

    </main>

</section>

@code {

    private List<ProdutoConsumido> produtosConsumidos = new List<ProdutoConsumido>();

    protected override async Task OnInitializedAsync() {

        await RecuperarConsumo();
    }

    private void Adicionar() {

        Navigation.NavigateTo("/Pesquisar");
    }

    private async Task RecuperarConsumo() {

        var usuarioIdStr = await JS.InvokeAsync<string>("localStorage.getItem", "usuarioId");

        if (int.TryParse(usuarioIdStr, out var usuarioId)) {

            produtosConsumidos = await ConsumoService.GetConsumoByUserId(usuarioId);
        }
        else {

            await DisplayAlert("Erro", "ID de usuário inválido ou não encontrado", "Ok");
        }
    }

    private async Task Excluir(int id) {

        var result = await ConsumoService.DeleteConsumo(id);

        if(result) {

            await RecuperarConsumo();
            StateHasChanged();
        }

    }

    private async Task Editar(int consumoId) {

        Navigation.NavigateTo($"/Edit/{consumoId}");
    }

    private async Task DisplayAlert(string title, string message, string cancel) {

        await Application.Current.MainPage.DisplayAlert(title, message, cancel);
    }

}
