@page "/Porcao/{Produto}/{ServingId}/{ServingDescription}/{MetricServingAmount}/{MetricServingUnit}/{NumberOfUnits}/{MeasurementDescription}/{Calories}/{Carbohydrate}/{Protein}/{Fat}/{SaturatedFat}/{PolyunsaturatedFat}/{MonounsaturatedFat}/{Cholesterol}/{Sodium}/{Potassium}/{Fiber}/{Sugar}/{VitaminA}/{VitaminC}/{Calcium}/{Iron}/{TransFat}/{AddedSugars}/{VitaminD}"
@using HealFit.Model
@using System.Web
@using System.Globalization
@using HealFit.Service
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IConsumoService ConsumoService

<section class="content px-4">

    <section>
        <button class="btn btn-outline-primary mb-2" @onclick="Voltar">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8" />
            </svg>
            Voltar
        </button>

    </section>

    <main>

        <div class="mb-2 mt-2">
            <input type="number" @onchange="@(e => RecalculateValues(e.Value.ToString()))" placeholder="Quantidade em (@MetricServingUnit)" class="flex w-100 p-2 rounded border border-1 border-secondary" />
        </div>

        <h4 class="mb-3">Detalhes do Consumo</h4>

        <p><strong>Produto:</strong> @Produto</p>
        <p><strong>Descrição:</strong> @HttpUtility.UrlDecode(ServingDescription)</p>
        <p><strong>Calorias:</strong> @Calories kcal</p>
        <p><strong>Carboidratos:</strong> @Carbohydrate g</p>
        <p><strong>Proteínas:</strong> @Protein g</p>
        <p><strong>Gorduras:</strong> @Fat g</p>
        <p><strong>Gorduras Saturadas:</strong> @SaturatedFat g</p>
        <p><strong>Gorduras Poliinsaturadas:</strong> @PolyunsaturatedFat g</p>
        <p><strong>Gorduras Monoinsaturadas:</strong> @MonounsaturatedFat g</p>
        <p><strong>Colesterol:</strong> @Cholesterol g</p>
        <p><strong>Sódio:</strong> @Sodium g</p>
        <p><strong>Potássio:</strong> @Potassium g</p>
        <p><strong>Fibra:</strong> @Fiber g</p>
        <p><strong>Açúcar:</strong> @Sugar g</p>
        <p><strong>Vitamina A:</strong> @VitaminA g</p>
        <p><strong>Vitamina C:</strong> @VitaminC g</p>
        <p><strong>Cálcio:</strong> @Calcium g</p>
        <p><strong>Ferro:</strong> @Iron g</p>
        <p><strong>Vitamina D:</strong> @VitaminD g</p>
        <p><strong>Gordura Trans:</strong> @TransFat g</p>
        <p><strong>Açúcares Adicionados:</strong> @AddedSugars g</p>

        <button class="btn btn-primary w-100 mb-4 mt-2" @onclick="Salvar">Adicionar</button>
    </main>

</section>

@code {

    [Parameter] public string Produto { get; set; }
    [Parameter] public string ServingId { get; set; }
    [Parameter] public string ServingDescription { get; set; }
    [Parameter] public string MetricServingAmount { get; set; }
    [Parameter] public string MetricServingUnit { get; set; }
    [Parameter] public string NumberOfUnits { get; set; }
    [Parameter] public string MeasurementDescription { get; set; }
    [Parameter] public string? Calories { get; set; }
    [Parameter] public string? Carbohydrate { get; set; }
    [Parameter] public string? Protein { get; set; }
    [Parameter] public string? Fat { get; set; }
    [Parameter] public string? SaturatedFat { get; set; }
    [Parameter] public string? PolyunsaturatedFat { get; set; }
    [Parameter] public string? MonounsaturatedFat { get; set; }
    [Parameter] public string? Cholesterol { get; set; }
    [Parameter] public string? Sodium { get; set; }
    [Parameter] public string? Potassium { get; set; }
    [Parameter] public string? Fiber { get; set; }
    [Parameter] public string? Sugar { get; set; }
    [Parameter] public string? VitaminA { get; set; }
    [Parameter] public string? VitaminC { get; set; }
    [Parameter] public string? Calcium { get; set; }
    [Parameter] public string? Iron { get; set; }
    [Parameter] public string? TransFat { get; set; }
    [Parameter] public string? AddedSugars { get; set; }
    [Parameter] public string? VitaminD { get; set; }

    private double originalQuantityValue;
    private double originalMetricServingAmount;
    private double originalCalories;
    private double originalCarbohydrate;
    private double originalProtein;
    private double originalFat;
    private double originalSaturatedFat;
    private double originalPolyunsaturatedFat;
    private double originalMonounsaturatedFat;
    private double originalCholesterol;
    private double originalSodium;
    private double originalPotassium;
    private double originalFiber;
    private double originalSugar;
    private double originalVitaminA;
    private double originalVitaminC;
    private double originalCalcium;
    private double originalIron;
    private double originalTransFat;
    private double originalAddedSugars;
    private double originalVitaminD;

    protected override void OnInitialized() {

        originalMetricServingAmount = Convert.ToDouble(MetricServingAmount, CultureInfo.InvariantCulture);

        // Inicializa as variáveis com os valores originais para que sejam usados no cálculo
        originalCalories = double.Parse(Calories ?? "0", CultureInfo.InvariantCulture);
        originalCarbohydrate = double.Parse(Carbohydrate ?? "0", CultureInfo.InvariantCulture);
        originalProtein = double.Parse(Protein ?? "0", CultureInfo.InvariantCulture);
        originalFat = double.Parse(Fat ?? "0", CultureInfo.InvariantCulture);
        originalSaturatedFat = double.Parse(SaturatedFat ?? "0", CultureInfo.InvariantCulture);
        originalPolyunsaturatedFat = double.Parse(PolyunsaturatedFat ?? "0", CultureInfo.InvariantCulture);
        originalMonounsaturatedFat = double.Parse(MonounsaturatedFat ?? "0", CultureInfo.InvariantCulture);
        originalCholesterol = double.Parse(Cholesterol ?? "0", CultureInfo.InvariantCulture);
        originalSodium = double.Parse(Sodium ?? "0", CultureInfo.InvariantCulture);
        originalPotassium = double.Parse(Potassium ?? "0", CultureInfo.InvariantCulture);
        originalFiber = double.Parse(Fiber ?? "0", CultureInfo.InvariantCulture);
        originalSugar = double.Parse(Sugar ?? "0", CultureInfo.InvariantCulture);
        originalVitaminA = double.Parse(VitaminA ?? "0", CultureInfo.InvariantCulture);
        originalVitaminC = double.Parse(VitaminC ?? "0", CultureInfo.InvariantCulture);
        originalCalcium = double.Parse(Calcium ?? "0", CultureInfo.InvariantCulture);
        originalIron = double.Parse(Iron ?? "0", CultureInfo.InvariantCulture);
        originalTransFat = double.Parse(TransFat ?? "0", CultureInfo.InvariantCulture);
        originalAddedSugars = double.Parse(AddedSugars ?? "0", CultureInfo.InvariantCulture);
        originalVitaminD = double.Parse(VitaminD ?? "0", CultureInfo.InvariantCulture);
    }

    private void RecalculateValues(string userQuantity) {

        double quantity;

        if (string.IsNullOrEmpty(userQuantity)) {  // Verifica se a quantidade do usuário está vazia e, se estiver, define o valor padrão

            userQuantity = MetricServingAmount;
        }

        quantity = double.Parse(userQuantity, CultureInfo.InvariantCulture);

        Calories = (quantity / originalMetricServingAmount * originalCalories).ToString(CultureInfo.InvariantCulture);
        Carbohydrate = FormatForDisplay(quantity / originalMetricServingAmount * originalCarbohydrate);
        Protein = FormatForDisplay(quantity / originalMetricServingAmount * originalProtein);
        Fat = FormatForDisplay(quantity / originalMetricServingAmount * originalFat);
        SaturatedFat = FormatForDisplay(quantity / originalMetricServingAmount * originalSaturatedFat);
        PolyunsaturatedFat = FormatForDisplay(quantity / originalMetricServingAmount * originalPolyunsaturatedFat);
        MonounsaturatedFat = FormatForDisplay(quantity / originalMetricServingAmount * originalMonounsaturatedFat);
        Cholesterol = FormatForDisplay(quantity / originalMetricServingAmount * originalCholesterol);
        Sodium = FormatForDisplay(quantity / originalMetricServingAmount * originalSodium);
        Potassium = FormatForDisplay(quantity / originalMetricServingAmount * originalPotassium);
        Fiber = FormatForDisplay(quantity / originalMetricServingAmount * originalFiber);
        Sugar = FormatForDisplay(quantity / originalMetricServingAmount * originalSugar);
        VitaminA = FormatForDisplay(quantity / originalMetricServingAmount * originalVitaminA);
        VitaminC = FormatForDisplay(quantity / originalMetricServingAmount * originalVitaminC);
        Calcium = FormatForDisplay(quantity / originalMetricServingAmount * originalCalcium);
        Iron = FormatForDisplay(quantity / originalMetricServingAmount * originalIron);
        TransFat = FormatForDisplay(quantity / originalMetricServingAmount * originalTransFat);
        AddedSugars = FormatForDisplay(quantity / originalMetricServingAmount * originalAddedSugars);
        VitaminD = FormatForDisplay(quantity / originalMetricServingAmount * originalVitaminD);
    }

    private string FormatForDisplay(double value) {
        return value.ToString("F3", new CultureInfo("pt-BR"));
    }

    private async Task Salvar() {

        var usuarioIdString = await JS.InvokeAsync<string>("localStorage.getItem", "usuarioId");

        // Declara 'dadosInformados' fora do bloco if
        ProdutoConsumido dadosInformados = null;

        if (int.TryParse(usuarioIdString, out int usuarioId)) {

            dadosInformados = new ProdutoConsumido {

                    Produto = Produto,
                    ServingId = ServingId,
                    ServingDescription = ServingDescription,
                    MetricServingAmount = MetricServingAmount,
                    MetricServingUnit = MetricServingUnit,
                    NumberOfUnits = NumberOfUnits,
                    MeasurementDescription = MeasurementDescription,
                    Calories = Calories,
                    Carbohydrate = Carbohydrate,
                    Protein = Protein,
                    Fat = Fat,
                    SaturatedFat = SaturatedFat,
                    PolyunsaturatedFat = PolyunsaturatedFat,
                    MonounsaturatedFat = MonounsaturatedFat,
                    Cholesterol = Cholesterol,
                    Sodium = Sodium,
                    Potassium = Potassium,
                    Fiber = Fiber,
                    Sugar = Sugar,
                    VitaminA = VitaminA,
                    VitaminC = VitaminC,
                    Calcium = Calcium,
                    Iron = Iron,
                    TransFat = TransFat,
                    AddedSugars = AddedSugars,
                    VitaminD = VitaminD,
                    Data = DateTime.Now,
                    UsuarioId = usuarioId
                };
        }

        if (dadosInformados != null) {

            var result = await ConsumoService.AddConsumo(dadosInformados);

            if (result) {

                Navigation.NavigateTo("/ConsumoDiario");
            }
            else {

                await DisplayAlert("Erro", "Erro ao cadastrar o produto", "Ok");
            }
        }
    }


    private void Voltar() {
        Navigation.NavigateTo("Pesquisar");
    }

    private async Task DisplayAlert(string title, string message, string cancel) {

        await Application.Current.MainPage.DisplayAlert(title, message, cancel);
    }
}