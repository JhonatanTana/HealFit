@page "/CadastroDados/{UsuarioId:int}"
@page "/CadastroDados/{UsuarioId:int}/{Edit:bool}"
@using AutoMapper
@using HealFit.Model
@using HealFit.Service
@inject IDadosService DadosService
@inject NavigationManager Navigation
@inject CepService CepService

<div class="slider-container justify-content-center MudaPagina">

    <! -- Slider Dados pessoais -->
    <div class="slider" style="transform: translateX(@(currentSlide * -100)%);">
        <div class="slide">
            <div class="mb-3">
                <a>Nome</a>
                <input type="text" name="Nome" @bind="cadastraDadosDTO.Nome" class="Entradas flex align-items-center" />
            </div>
            <div class="mb-3">
                <a>Sobrenome</a>    
                <input type="text" name="Sobrenome" @bind="cadastraDadosDTO.Sobrenome" class=" Entradas p-3" />
            </div>
            <div class="mb-3">
                <label>Data de Nascimento</label>
                <input type="date" name="Data de Nascimento" @bind="cadastraDadosDTO.DataNascimento" class=" Entradas p-3" />
            </div>
        </div>

        <! -- Slider Peso e Altura -->
        <div class="slide">
            <div class="mb-3">
                <a>Altura (Metros)</a>
                <input type="number" name="Altura" @bind="cadastraDadosDTO.Altura" step="0.01" class=" Entradas p-3" />
            </div>
            <div class="mb-3">
                <a>Peso (Kgs)</a>
                <input type="number" name="Peso" @bind="cadastraDadosDTO.Peso" step="0.01" class=" Entradas p-3" />
            </div>
        </div>

        <! -- Slider endereço -->
        <div class="slide">
            <div class="">
                <a>CEP</a>
                <input type="number" name="Cep" placeholder="CEP" value="@cadastraDadosDTO.Cep" class=" Entradas p-3" @onchange="BuscarCep" />
            </div>
            <div class="">
                <a>Cidade</a>
                <input type="text" name="Cidade" placeholder="Cidade" @bind="cadastraDadosDTO.Cidade" class=" Entradas p-3" readonly="@CepEncontrado" />
            </div>
            <div class="">
                <a>Estado</a>
                <input type="text" name="Estado" placeholder="Estado" @bind="cadastraDadosDTO.Estado" class=" Entradas p-3" readonly="@CepEncontrado" />
            </div>
            <div class="">
                <a>Bairro</a>
                <input type="text" name="Bairro" placeholder="Bairro" @bind="cadastraDadosDTO.Bairro" class=" Entradas p-3" readonly="@CepEncontrado" />
            </div>
            <div class="">
                <a>Rua</a>
                <input type="text" name="Rua" placeholder="Rua" @bind="cadastraDadosDTO.Rua" class=" Entradas p-3" readonly="@CepEncontrado" />
            </div>
            <div class="">
                <a>Numero</a>
                <input type="text" name="Numero" placeholder="Numero" @bind="cadastraDadosDTO.Numero" class=" Entradas p-3" />
            </div>
                <div class="">
                <a>Complemento</a>
                <input type="text" name="Complemento" placeholder="Complemento" @bind="cadastraDadosDTO.Complemento" class="Entradas p-3" />
                </div>
        </div>
            <div class="slide">
            <button type="submit" class="BtnCad" @onclick="CadastrarDados">Cadastrar</button>
        </div>
    </div>
    <div class="gap-4 Espaco">
        <button @onclick="PreviousSlide" class="Butao">
            <svg width="30px" height="30px" viewBox="0 0 11 20" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                <!-- Generator: Sketch 52.5 (67469) - http://www.bohemiancoding.com/sketch -->
                <title>arrow_back_ios</title>
                <desc>Created with Sketch.</desc>
                <g id="Icons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                    <g id="Rounded" transform="translate(-548.000000, -3434.000000)">
                        <g id="Navigation" transform="translate(100.000000, 3378.000000)">
                            <g id="-Round-/-Navigation-/-arrow_back_ios" transform="translate(442.000000, 54.000000)">
                                <g>
                                    <polygon id="Path" opacity="0.87" points="0 0 24 0 24 24 0 24"></polygon>
                                    <path d="M16.62,2.99 C16.13,2.5 15.34,2.5 14.85,2.99 L6.54,11.3 C6.15,11.69 6.15,12.32 6.54,12.71 L14.85,21.02 C15.34,21.51 16.13,21.51 16.62,21.02 C17.11,20.53 17.11,19.74 16.62,19.25 L9.38,12 L16.63,4.75 C17.11,4.27 17.11,3.47 16.62,2.99 Z" id="🔹-Icon-Color" fill="#1D1D1D"></path>
                                </g>
                            </g>
                        </g>
                    </g>
                </g>
            </svg>
        </button>
        <button @onclick="NextSlide" class="Butao mtp">
            <svg width="30px" height="30px" viewBox="0 0 11 20" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                <!-- Generator: Sketch 52.5 (67469) - http://www.bohemiancoding.com/sketch -->
                <title>arrow_forward_ios</title>
                <desc>Created with Sketch.</desc>
                <g id="Icons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                    <g id="Rounded" transform="translate(-345.000000, -3434.000000)">
                        <g id="Navigation" transform="translate(100.000000, 3378.000000)">
                            <g id="-Round-/-Navigation-/-arrow_forward_ios" transform="translate(238.000000, 54.000000)">
                                <g>
                                    <polygon id="Path" opacity="0.87" points="24 24 0 24 0 0 24 0"></polygon>
                                    <path d="M7.38,21.01 C7.87,21.5 8.66,21.5 9.15,21.01 L17.46,12.7 C17.85,12.31 17.85,11.68 17.46,11.29 L9.15,2.98 C8.66,2.49 7.87,2.49 7.38,2.98 C6.89,3.47 6.89,4.26 7.38,4.75 L14.62,12 L7.37,19.25 C6.89,19.73 6.89,20.53 7.38,21.01 Z" id="🔹-Icon-Color" fill="#1D1D1D"></path>
                                </g>
                            </g>
                        </g>
                    </g>
                </g>
            </svg>
        </button>

    </div>
</div>



<Footer></Footer>

@code {


    [Parameter]
    public int UsuarioId { get; set; }
    [Parameter]
    public bool Edit { get; set; }

    private DadosPessoais cadastraDadosDTO = new DadosPessoais();
    private bool CepEncontrado = false;

    private int currentSlide = 0;
    private int totalSlides = 3; // Number of slides - 1 (index-based)

    private void NextSlide()
    {
        if (currentSlide < totalSlides)
        {
            currentSlide++;
        }
    }

    private void PreviousSlide()
    {
        if (currentSlide > 0)
        {
            currentSlide--;
        }
    }

    protected override async Task OnInitializedAsync() {

        if (Edit) {
            var dadosPessoais = await DadosService.GetDadosById(UsuarioId);

            if (dadosPessoais != null) {

                cadastraDadosDTO = dadosPessoais;
            }
        }
    }


    private async Task CadastrarDados() {

        if(Edit) {

            var dadosInformados = cadastraDadosDTO;

            dadosInformados.UsuarioId = UsuarioId;

            var result = await DadosService.UpdateDados(dadosInformados);

            if (result) {
                Navigation.NavigateTo("/Perfil");
            }
            else {
                await DisplayAlert("Erro", "Erro ao cadastrar os dados", "Ok");
            }

        }
        else {

            var dadosInformados = cadastraDadosDTO;

            dadosInformados.UsuarioId = UsuarioId;

            var result = await DadosService.AddDados(dadosInformados);

            if (result) {
                Navigation.NavigateTo("/Home");
            }
            else {
                await DisplayAlert("Erro", "Erro ao cadastrar os dados", "Ok");
            }
        }
    }

    private async Task BuscarCep(ChangeEventArgs e) {

        var cep = e.Value.ToString();
        cadastraDadosDTO.Cep = cep; // Atualiza o valor de 'Cep' manualmente

        var cepInfo = await CepService.GetCepInfo(cep);

        if (cepInfo != null) {
            cadastraDadosDTO.Rua = cepInfo.Logradouro;
            cadastraDadosDTO.Bairro = cepInfo.Bairro;
            cadastraDadosDTO.Cidade = cepInfo.Localidade;
            cadastraDadosDTO.Estado = cepInfo.Uf;

            CepEncontrado = true;
        }
        else {
            await DisplayAlert("Erro", "CEP não encontrado", "Ok");
            CepEncontrado = false;
        }
    }

    private async Task DisplayAlert(string title, string message, string cancel) {

        await Application.Current.MainPage.DisplayAlert(title, message, cancel);
    }
}
