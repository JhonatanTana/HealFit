@page "/CadastroDados/{UsuarioId:int}"
@page "/CadastroDados/{UsuarioId:int}/{Edit:bool}"
@using AutoMapper
@using HealFit.DTO.Request
@using HealFit.Model
@using HealFit.Service
@inject IDadosService DadosService
@inject NavigationManager Navigation
@inject IMapper Mapper
@inject CepService CepService

<section class="content px-4">
    <h3 class="mb-3">Cadastro de Dados Pessoais</h3>

    <EditForm Model="cadastraDadosDTO" OnSubmit="CadastrarDados">

        <div class="mb-3">
            <input type="text" name="Nome" placeholder="Nome" @bind="cadastraDadosDTO.Nome" class="w-100 p-2 rounded border border-1 border-secondary" />
        </div>
        <div class="mb-3">
            <input type="text" name="Sobrenome" placeholder="Sobrenome" @bind="cadastraDadosDTO.Sobrenome" class="w-100 p-2 rounded border border-1 border-secondary" />
        </div>
        <div class="mb-3">
            <label>Data de Nascimento</label>
            <input type="date" name="Data de Nascimento" @bind="cadastraDadosDTO.DataNascimento" class="w-100 p-2 rounded border border-1 border-secondary" />
        </div>
        <div class="mb-3">
            <input type="number" name="Altura" placeholder="Altura (em Metros)" @bind="cadastraDadosDTO.Altura" step="0.01" class="w-100 p-2 rounded border border-1 border-secondary" />
        </div>
        <div class="mb-3">
            <input type="number" name="Peso" placeholder="Peso (em Kg)" @bind="cadastraDadosDTO.Peso" step="0.01" class="w-100 p-2 rounded border border-1 border-secondary" />
        </div>
        <div class="mb-3">
            <input type="number" name="Cep" placeholder="CEP" value="@cadastraDadosDTO.Cep" class="w-100 p-2 rounded border border-1 border-secondary" @onchange="BuscarCep" />
        </div>
        <div class="mb-3">
            <input type="text" name="Cidade" placeholder="Cidade" @bind="cadastraDadosDTO.Cidade" class="w-100 p-2 rounded border border-1 border-secondary" readonly="@CepEncontrado" />
        </div>
        <div class="mb-3">
            <input type="text" name="Estado" placeholder="Estado" @bind="cadastraDadosDTO.Estado" class="w-100 p-2 rounded border border-1 border-secondary" readonly="@CepEncontrado" />
        </div>
        <div class="mb-3">
            <input type="text" name="Bairro" placeholder="Bairro" @bind="cadastraDadosDTO.Bairro" class="w-100 p-2 rounded border border-1 border-secondary" readonly="@CepEncontrado" />
        </div>
        <div class="mb-3">
            <input type="text" name="Rua" placeholder="Rua" @bind="cadastraDadosDTO.Rua" class="w-100 p-2 rounded border border-1 border-secondary" readonly="@CepEncontrado" />
        </div>
        <div class="mb-3">
            <input type="text" name="Numero" placeholder="Numero" @bind="cadastraDadosDTO.Numero" class="w-100 p-2 rounded border border-1 border-secondary" />
        </div>
        <div class="mb-3">
            <input type="text" name="Complemento" placeholder="Complemento" @bind="cadastraDadosDTO.Complemento" class="w-100 p-2 rounded border border-1 border-secondary" />
        </div>

        <button type="submit" class="btn btn-primary w-100">Cadastrar</button>
    </EditForm>

</section>

@code {
    [Parameter]
    public int UsuarioId { get; set; }
    [Parameter]
    public bool Edit { get; set; }

    private CadastraDadosDTORequest cadastraDadosDTO = new CadastraDadosDTORequest();
    private bool CepEncontrado = false;

    protected override async Task OnInitializedAsync() {

        if (Edit) {
            var dadosPessoais = await DadosService.GetDadosById(UsuarioId);
            if (dadosPessoais != null) {
                cadastraDadosDTO = Mapper.Map<CadastraDadosDTORequest>(dadosPessoais);
            }
        }
    }


    private async Task CadastrarDados() {

        if(Edit) {
            var dadosInformados = Mapper.Map<DadosPessoaisModel>(cadastraDadosDTO);
            dadosInformados.UsuarioId = UsuarioId;

            var result = await DadosService.UpdateDados(dadosInformados);

            if (result > 0) {
                Navigation.NavigateTo("/Perfil");
            }
            else {
                await DisplayAlert("Erro", "Erro ao cadastrar os dados", "Ok");
            }

        }
        else {
            var dadosInformados = Mapper.Map<DadosPessoaisModel>(cadastraDadosDTO);
            dadosInformados.UsuarioId = UsuarioId;

            var result = await DadosService.AddDados(dadosInformados);

            if (result > 0) {
                Navigation.NavigateTo("/Home");
            }
            else {
                await DisplayAlert("Erro", "Erro ao cadastrar os dados", "Ok");
            }
        }
    }

    private async Task BuscarCep(ChangeEventArgs e) {
        var cep = e.Value.ToString();
        cadastraDadosDTO.Cep = cep; // Atualiza o valor de 'Cep' manualmente

        var cepInfo = await CepService.GetCepInfo(cep);

        if (cepInfo != null) {
            cadastraDadosDTO.Rua = cepInfo.Logradouro;
            cadastraDadosDTO.Bairro = cepInfo.Bairro;
            cadastraDadosDTO.Cidade = cepInfo.Localidade;
            cadastraDadosDTO.Estado = cepInfo.Uf;

            CepEncontrado = true;
        }
        else {
            await DisplayAlert("Erro", "CEP não encontrado", "Ok");
            CepEncontrado = false;
        }
    }

    private async Task DisplayAlert(string title, string message, string cancel) {
        await Application.Current.MainPage.DisplayAlert(title, message, cancel);
    }
}
