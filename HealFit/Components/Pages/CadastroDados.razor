@page "/CadastroDados/{UsuarioId:int}"
@page "/CadastroDados/{UsuarioId:int}/{Edit:bool}"
@using AutoMapper
@using HealFit.Model
@using HealFit.Service
@using Microsoft.Maui.Controls
@inject IDadosService DadosService
@inject NavigationManager Navigation
@inject CepService CepService

<div class="slider-container justify-content-center MudaPagina">

    <! -- Slider Dados pessoais -->
    <div class="slider" style="transform: translateX(@(currentSlide * -100)%);">
        <div class="slide">
            <div class="mb-3">
                <a>Nome</a>
                <input type="text" name="Nome" @bind="cadastraDadosDTO.Nome" class="Entradas flex align-items-center" />
            </div>
            <div class="mb-3">
                <a>Sobrenome</a>    
                <input type="text" name="Sobrenome" @bind="cadastraDadosDTO.Sobrenome" class=" Entradas p-3" />
            </div>
            <div class="mb-3">
                <label>Data de Nascimento</label>
                <input type="date" name="Data de Nascimento" @bind="cadastraDadosDTO.DataNascimento" class=" Entradas p-3" />
            </div>
        </div>

        <! -- Slider Peso e Altura -->
        <div class="slide">
            <div class="mb-3">
                <a>Altura (Metros)</a>
                <input type="number" name="Altura" @bind="cadastraDadosDTO.Altura" step="0.01" class=" Entradas p-3" />
            </div>
            <div class="mb-3">
                <a>Peso (Kgs)</a>
                <input type="number" name="Peso" @bind="cadastraDadosDTO.Peso" step="0.01" class=" Entradas p-3" />
            </div>
        </div>

        <! -- Slider endereço -->
        <div class="slide">
            <div class="">
                <a>CEP</a>
                <input type="number" name="Cep" placeholder="CEP" value="@cadastraDadosDTO.Cep" class=" Entradas p-3" @onchange="BuscarCep" />
            </div>
            <div class="">
                <a>Cidade</a>
                <input type="text" name="Cidade" placeholder="Cidade" @bind="cadastraDadosDTO.Cidade" class=" Entradas p-3" readonly="@CepEncontrado" />
            </div>
            <div class="">
                <a>Estado</a>
                <input type="text" name="Estado" placeholder="Estado" @bind="cadastraDadosDTO.Estado" class=" Entradas p-3" readonly="@CepEncontrado" />
            </div>
            <div class="">
                <a>Bairro</a>
                <input type="text" name="Bairro" placeholder="Bairro" @bind="cadastraDadosDTO.Bairro" class=" Entradas p-3" readonly="@CepEncontrado" />
            </div>
            <div class="">
                <a>Rua</a>
                <input type="text" name="Rua" placeholder="Rua" @bind="cadastraDadosDTO.Rua" class=" Entradas p-3" readonly="@CepEncontrado" />
            </div>
            <div class="">
                <a>Numero</a>
                <input type="text" name="Numero" placeholder="Numero" @bind="cadastraDadosDTO.Numero" class=" Entradas p-3" />
            </div>
                <div class="">
                <a>Complemento</a>
                <input type="text" name="Complemento" placeholder="Complemento" @bind="cadastraDadosDTO.Complemento" class="Entradas p-3" />
                </div>
        </div>
            <div class="slide">


            <button type="submit" class="BtnCad" @onclick="CadastrarDados">Cadastrar</button>

        
        </div>
    </div>
    <div class="gap-4 Espaco">
        <button @onclick="PreviousSlide" class="Butao mtp">
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M15 7L10 12L15 17" stroke="#000000" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>
        </button>

        <button @onclick="NextSlide" class="Butao mtr">
            <svg fill="#ffffff" viewBox="0 0 32 32" id="icon" xmlns="http://www.w3.org/2000/svg" stroke="#ffffff">
                <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                <g id="SVGRepo_iconCarrier">
                    <defs>
                        <style>
                            .cls-1 {
                                fill: none;
                            }
                        </style>
                    </defs> <path d="M2,16A14,14,0,1,0,16,2,14,14,0,0,0,2,16Zm6-1H20.15L14.57,9.3926,16,8l8,8-8,8-1.43-1.4272L20.15,17H8Z"></path> <polygon id="inner-path" class="cls-1" points="16 8 14.57 9.393 20.15 15 8 15 8 17 20.15 17 14.57 22.573 16 24 24 16 16 8"></polygon> <rect id="_Transparent_Rectangle_" data-name="<Transparent Rectangle>" class="cls-1" width="32" height="32"></rect>
                </g>
            </svg>
        </button>

    </div>
</div>

@code {


    [Parameter]
    public int UsuarioId { get; set; }
    [Parameter]
    public bool Edit { get; set; }

    private DadosPessoais cadastraDadosDTO = new DadosPessoais();
    private bool CepEncontrado = false;

    private int currentSlide = 0;
    private int totalSlides = 3; // Number of slides - 1 (index-based)

    private void NextSlide()
    {
        if (currentSlide < totalSlides)
        {
            currentSlide++;
        }
    }

    private void PreviousSlide()
    {
        if (currentSlide > 0)
        {
            currentSlide--;
        }
    }

    protected override async Task OnInitializedAsync() {

        if (Edit) {
            var dadosPessoais = await DadosService.GetDadosById(UsuarioId);

            if (dadosPessoais != null) {

                cadastraDadosDTO = dadosPessoais;
            }
        }
    }


    private async Task CadastrarDados() {

        if(Edit) {

            var dadosInformados = cadastraDadosDTO;

            dadosInformados.UsuarioId = UsuarioId;

            var result = await DadosService.UpdateDados(dadosInformados);

            if (result) {
                Navigation.NavigateTo("/Perfil");
            }
            else {
                await DisplayAlert("Erro", "Erro ao cadastrar os dados", "Ok");
            }

        }
        else {

            var dadosInformados = cadastraDadosDTO;

            dadosInformados.UsuarioId = UsuarioId;

            var result = await DadosService.AddDados(dadosInformados);

            if (result) {
                Navigation.NavigateTo("/Home");
            }
            else {
                await DisplayAlert("Erro", "Erro ao cadastrar os dados", "Ok");
            }
        }
    }

    private async Task BuscarCep(ChangeEventArgs e) {

        var cep = e.Value.ToString();
        cadastraDadosDTO.Cep = cep; // Atualiza o valor de 'Cep' manualmente

        var cepInfo = await CepService.GetCepInfo(cep);

        if (cepInfo != null) {
            cadastraDadosDTO.Rua = cepInfo.Logradouro;
            cadastraDadosDTO.Bairro = cepInfo.Bairro;
            cadastraDadosDTO.Cidade = cepInfo.Localidade;
            cadastraDadosDTO.Estado = cepInfo.Uf;

            CepEncontrado = true;
        }
        else {
            await DisplayAlert("Erro", "CEP não encontrado", "Ok");
            CepEncontrado = false;
        }
    }

    private async Task DisplayAlert(string title, string message, string cancel) {

        await Application.Current.MainPage.DisplayAlert(title, message, cancel);
    }
}
