@page "/Pesquisar"
@using HealFit.Model
@using HealFit.Service
@using Newtonsoft.Json
@inject NavigationManager Navigation
@inject FatSecretService FatSecret
@inject TranslationService TranslationService

<section class="content px-4">

    <section>
        <button class="btn btn-outline-primary mb-2" @onclick="Voltar">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8" />
            </svg>
            Voltar
        </button>

        <div>
            <input type="text" @bind="FoodName" placeholder="Produto" class="flex w-100 p-2 rounded border border-1 border-secondary" />
            <button class="btn btn-primary mt-2" @onclick="BuscarAlimentosAsync">Buscar</button>
        </div>
    </section>

    <main class="mt-2 h-85 overflow-auto">

        @if(loading) {

            <div class="w-100 h-100 d-flex justify-content-center align-content-center z-3 position-absolute">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            
        }

        @if (SearchResults != null) {
            @foreach (var food in SearchResults.Foods.Food) {
                <div class="p-2 m-2 border border-secundary d-flex align-items-center justify-content-between">
                    <span>@food.TranslatedFoodName</span>
                    <button class="btn btn-primary" @onclick="() => Selecionar(food.food_id)">Adicionar</button>
                </div>
            }
        }
    </main>

</section>

@code {
    private string FoodName { get; set; } = string.Empty;
    private FoodSearchResult SearchResults { get; set; }
    private bool loading = false;

    private void Voltar() {
        Navigation.NavigateTo("ConsumoDiario");
    }

    private void Selecionar(int produtoId) {
        Navigation.NavigateTo($"/AdicionarConsumo/{produtoId}");
    }

    private async Task BuscarAlimentosAsync() {

        loading = true;

        if (!string.IsNullOrWhiteSpace(FoodName)) {
            // Traduza o nome do alimento antes de buscar
            string translatedFoodName = await TranslationService.TranslateAsync(FoodName, "en");

            // Busque os alimentos usando o nome traduzido
            var result = await FatSecret.SearchFoodsAsync(translatedFoodName);
            SearchResults = await ParseSearchResults(result);

            // Traduza o nome de cada alimento nos resultados
            if (SearchResults != null && SearchResults.Foods != null) {
                foreach (var food in SearchResults.Foods.Food) {
                    food.TranslatedFoodName = await TranslationService.TranslateAsync(food.food_name, "pt"); // Traduza o nome original para português
                    loading = false;
                }
            }

            StateHasChanged(); // Atualize a interface do usuário
        }
    }

    private async Task<FoodSearchResult> ParseSearchResults(string jsonResponse) {
        if (string.IsNullOrEmpty(jsonResponse)) {
            return null;
        }

        try {
            var searchResult = JsonConvert.DeserializeObject<FoodSearchResult>(jsonResponse);
            if (searchResult.Foods == null || searchResult.Foods.Food == null) {
                await DisplayAlert("Erro", "A resposta JSON não contém dados válidos.", "Ok");
                return null;
            }
            return searchResult;
        }
        catch (JsonException ex) {
            await DisplayAlert("Erro", $"{ex.Message}", "Ok");
            return null;
        }
    }


    private async Task DisplayAlert(string titulo, string descricao, string confirmacao) {

        await App.Current.MainPage.DisplayAlert(titulo, descricao, confirmacao);
    }
}