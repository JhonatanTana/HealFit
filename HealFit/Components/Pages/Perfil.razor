@page "/Perfil"
@using AutoMapper
@using HealFit.Components.Layout
@using HealFit.DTO.Request
@using HealFit.Service
@inject IDadosService DadosService
@inject NavigationManager Navigation
@inject IMapper Mapper
@inject IJSRuntime JS

<NavMenu></NavMenu>

<h3 class="px-4 content">Perfil</h3>

<div class="row">
    <div class="col-12">
        <div class="card m-4">
            <div class="card-body">
                <h5 class="card-title">Dados Pessoais</h5>
                <p class="card-text">Nome: @cadastraDadosDTO.Nome</p>
                <p class="card-text">Sobrenome: @cadastraDadosDTO.Sobrenome</p>
                <p class="card-text">Data de Nascimento: @FormatarDataNascimento(cadastraDadosDTO.DataNascimento) (@CalcularIdade(cadastraDadosDTO.DataNascimento) Anos)</p>
                <p class="card-text">Altura: @cadastraDadosDTO.Altura</p>
                <p class="card-text">Peso: @cadastraDadosDTO.Peso</p>
                <p class="card-text">IMC: @CalcularIMC()</p> <!-- Exibe o IMC calculado -->
                <p class="card-text">Classificação IMC: @ClassificarIMC()</p> <!-- Exibe a classificação do IMC -->
                <p class="card-text">CEP: @cadastraDadosDTO.Cep</p>
                <p class="card-text">Cidade: @cadastraDadosDTO.Cidade</p>
                <p class="card-text">Estado: @cadastraDadosDTO.Estado</p>
                <p class="card-text">Bairro: @cadastraDadosDTO.Bairro</p>
                <p class="card-text">Rua: @cadastraDadosDTO.Rua</p>
                <p class="card-text">Numero: @cadastraDadosDTO.Numero</p>
                <p class="card-text">Complemento: @cadastraDadosDTO.Complemento</p>
                <button class="btn btn-primary w-100" @onclick="() => editar(cadastraDadosDTO.UsuarioId)">Editar</button>
            </div>
        </div>
    </div>
</div>

@code {

    private CadastraDadosDTORequest cadastraDadosDTO = new CadastraDadosDTORequest();

    protected override async Task OnInitializedAsync() {
        // Recupera o ID do usuário do local storage
        var usuarioIdStr = await JS.InvokeAsync<string>("localStorage.getItem", "usuarioId");

        // Verifica se o ID foi recuperado e tenta convertê-lo para um inteiro
        if (int.TryParse(usuarioIdStr, out var usuarioId)) {
            var dados = await DadosService.GetDadosById(usuarioId);
            cadastraDadosDTO = Mapper.Map<CadastraDadosDTORequest>(dados);
        }
        else {
            // Se o ID não foi encontrado ou é inválido, redireciona ou exibe uma mensagem de erro
            await DisplayAlert("Erro", "ID de usuário inválido ou não encontrado", "Ok");
        }
    }

    private string FormatarDataNascimento(DateTime dataNascimento) {
        return dataNascimento.ToString("dd/MM/yyyy"); // Formata para exibir apenas a data
    }

    private int CalcularIdade(DateTime dataNascimento) {
        var hoje = DateTime.Today;
        var idade = hoje.Year - dataNascimento.Year;

        // Ajusta a idade caso ainda não tenha feito aniversário este ano
        if (dataNascimento > hoje.AddYears(-idade)) {
            idade--;
        }
        return idade;
    }

    private decimal CalcularIMC() {
        if (cadastraDadosDTO.Altura > 0 && cadastraDadosDTO.Peso > 0) {
            return Math.Round(cadastraDadosDTO.Peso / (cadastraDadosDTO.Altura * cadastraDadosDTO.Altura), 2);
        }
        return 0;
    }

    private string ClassificarIMC() {
        var imc = CalcularIMC();

        if (imc < 18.5m) {
            return "Ruim (Abaixo do peso)";
        }
        else if (imc >= 18.5m && imc <= 24.9m) {
            return "Bom (Peso normal)";
        }
        else if (imc >= 25.0m && imc <= 29.9m) {
            return "Ruim (Sobrepeso)";
        }
        else if (imc >= 30.0m && imc <= 34.9m) {
            return "Ruim (Obesidade grau 1)";
        }
        else if (imc >= 35.0m && imc <= 39.9m) {
            return "Ruim (Obesidade grau 2)";
        }
        else {
            return "Ruim (Obesidade grau 3)";
        }
    }

    private void editar(int usuarioId) {
        Navigation.NavigateTo($"/CadastroDados/{usuarioId}/true");
    }

    private async Task DisplayAlert(string title, string message, string cancel) {

        await Application.Current.MainPage.DisplayAlert(title, message, cancel);
    }

}
