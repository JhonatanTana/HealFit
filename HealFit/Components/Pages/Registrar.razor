@page "/Registrar"
@page "/Registrar/{UsuarioId:int}"
@using AutoMapper
@using HealFit.Model
@using HealFit.Service
@inject IUsuarioService UsuarioService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<Footer></Footer>

<section class="content px-4">

    <h3 class="mb-3">@((UsuarioId > 0) ? "Atualizar Usuário" : "Registrar-se")</h3>

    <EditForm Model="registroUsuarioDTO" OnSubmit="RegistrarUsuario" class="flex flex-column flex-nowrap w-100">

        <div class="mb-3">
            <input type="email" @bind="registroUsuarioDTO.Email" name="email" placeholder="Email" class="w-100 p-2 rounded border border-1 border-secondary" />
        </div>
        <div class="mb-3">
            <input type="password" @bind="registroUsuarioDTO.Senha" name="senha" placeholder="Senha" class="w-100 p-2 rounded border border-1 border-secondary" />
        </div>
        <div class="mb-3">
            <input type="password" @bind="ConfSenha" name="confSenha" placeholder="Confirmação de Senha" class="w-100 p-2 rounded border border-1 border-secondary" />
        </div>

        <button class="btn btn-primary">Registrar</button>
    </EditForm>
</section>

@code {
    [Parameter]
    public int UsuarioId { get; set; }
    public string ConfSenha { get; set; }

    private Usuario registroUsuarioDTO = new Usuario();
    private List<Usuario> usuarios;

    protected override async Task OnInitializedAsync() {

        if (UsuarioId > 0) {

            // Atualiza dados de um usuário existente
            var usuario = await UsuarioService.GetUsuarioById(UsuarioId);
            registroUsuarioDTO.Email = usuario.Email;
        }
    }


    private async Task RegistrarUsuario() {

        if (registroUsuarioDTO.Senha != ConfSenha) {

            await DisplayAlert("Erro", "As senhas não coincidem", "Ok");
            return;
        }

        if (UsuarioId > 0) {

            var usuarioModelo = new Usuario { 
                Email = registroUsuarioDTO.Email, 
                Senha = registroUsuarioDTO.Senha, 
                UsuarioId = UsuarioId 
            };
            var response = await UsuarioService.UpdateUsuario(usuarioModelo);

            if (response) // Verifica se o usuário foi cadastrado com sucesso
            {
                Navigation.NavigateTo("/Perfil");
            }
            else {
                await DisplayAlert("Erro", "Erro ao alterar a senha", "Ok");
            }

        }
        else {

            var usuarioModelo = new Usuario { Email = registroUsuarioDTO.Email, Senha = registroUsuarioDTO.Senha };
            var response = await UsuarioService.AddUsuario(usuarioModelo);

            if (response.UsuarioId > 0) // Verifica se o usuário foi cadastrado com sucesso
            {
                Navigation.NavigateTo($"/CadastroDados/{UsuarioId}");
            }
            else {
                await DisplayAlert("Erro", "Erro ao cadastrar", "Ok");
            }

        }
    }

    private async Task DisplayAlert(string title, string message, string cancel) {

        await Application.Current.MainPage.DisplayAlert(title, message, cancel);
    }

}
